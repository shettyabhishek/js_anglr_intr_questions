AWS - S3 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
	1. S3 
		- Simple Storage Service. Can store unlimited amount of data.
		- Simple data transfer. 
		- Security and access management
		- Tiered Storage Classes (Based on pricing)
		- Advantages of S3 
			- creating buckets (basically a folder that holds information as a combination of key and object)
			- can download data 
			- permissions can be managed 
			- standard interfaces to manage various programming framework (.Net, Java, node)
		- Creating and configuring S3 bucket 
			- bucket name should match the domain name that u give for the S3 bucket and should be unique
	2. Cloudfront 
		- Content delivery network
		- Webservice for serving web content (static & dynamic)
		- Cloudfront uses Edge Locations to serve requests (holds the cached content at these edge locations fetched from the actual remote server)
		- Provides lower latencies 
		- Advantages of cloudfront 
			- easy to set up CDNs 
			- provides edge locations so lower latencies
			- geo restrictions (helpful specially when serving region specific streaming content)
			- private content using pre-signed urls (serving content based on subscriptions. E.g. watching content from netflix)
			- origins can be webserver / s3
		- Creating a cloudfront 
			- search for cloudfront service and select create distribution (2 options web & RTMP-for serving streaming like content)
			- 

Generic UI 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
Server Side Rendering
	1. Server side renderin was earlier used in older tech like JSP. Server side rendering is usually used when SEO is a priority. 
		- Implemented using a plugin called angular universal -> ng add @nguniversal/express-engine
		- package.json gets updated with suitable scripts for supporting ssr
		- on build the dist folder contains 2 folders one for the browse (has index.html and js bundle files) and the server folder( has only main.js file because the html would be generated by server)
	2. Client side rendering is used mostly for dynamic UI rendering 
	3. Static content - use of prerender plugin. Also needs a configuration in the angular.json file that has routing configurations 
		defined with a pre-render section 
	
MonoRepo 
	Advantages 
		- version consistency is easier to maintain across the applications
		- sharing features among the applications
		- separate pipeline for each application
		
	Disadvantages
		- git actions are slow , as the build / test cases have to run across all the applications
		- encourages tight coupling, ideally since there is dependency
		- pipeline issue 
		- PRs approvals might have to be approved by multiple people
		- main if broken all other applications get blocked 
		- branches are created then ensure they are merged to main so that all other applications get the latest version
	
	Commands to create a monorepo
	- Command to install nx 
		- npm install -g nx
	- Command to create a workspace
		- npx create-nx-workspace@latest anglr-app-workspace
	- Command to enable angular application to be created
		- npm install @nx/angular -D
	- Command to create an angular application called my-sec-ang-appln
		- nx generate @nx/angular:application my-sec-ang-appln
	- Command to create lib components and share them across the other applications
		-nx generate @nx/angular:lib comp-lib 
	- Command for adding component to lib 
		-nx generate @nx/angular:component --project=comp-lib --name=componentName




React Questions 
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
What is Virtual DOM?
	React keeps a lightweight representation of the real DOM in the memory, and that is known as the virtual DOM. When the state of an object changes, virtual DOM changes only that object in the real DOM, rather than updating all the objects.
Is react Unidirectional or Bi-directional 
	Unidirectional
Functional Components: 
	These types of components have no state of their own and only contain render methods, and therefore are also called stateless components. They may derive data from other components as props (properties).
Class Components: 
	These types of components can hold and manage their own state and have a separate render method to return JSX on the screen. They are also called Stateful components as they can have a state.
Life cycle methods 
	getInitialState(): This is executed before the creation of the component.
	componentDidMount(): Is executed when the component gets rendered and placed on the DOM.
	shouldComponentUpdate(): Is invoked when a component determines changes to the DOM and returns a “true” or “false” value based on certain conditions.
	componentDidUpdate(): Is invoked immediately after rendering takes place.
	componentWillUnmount(): Is invoked immediately before a component is destroyed and unmounted permanently.
What are the components of Redux?
	Store: Holds the state of the application.
	Action: The source information for the store.
	Reducer: Specifies how the application's state changes in response to actions sent to the store.

1. JSX - Javascript xml . Single parent rendering 
   Find issue below
   ReactDOM.render(<h1>Hello World </h1><p> How are you today </p>, document.getElementById('root'))
2. have u configured webpack config file. What all details does it have (input, output, dependent loader modules)
3. Why import React from 'react' is used, even though the React is never used in the code (Because the JSX syntax is defined in React package)
4. <Contact phone="11-222-134222"/>
	function Contact(props){
		return (<div className='phNum'>{props.phone}</div>);
	}

	- Can the attribute be something else other than props
5. Can I add a custom prop to the native dom element in React     //Nope JSX will recognize them, eventually these props get converted to native DOM attributes.
																  //And native dom attributes will not have them
   E.g. <div myProp="qwerty"></div>
	
Other Questions 
1. How to gauge performance and how do improve 
2. NFRs - Accessibility 
3. Estimations
4. What is reactive web app 
5. What is the meaning of boiler plate code - In computer programming, boilerplate code or boilerplate refers to sections of code that have to be included in many places with little or no alteration.
6. A sandbox is an isolated testing environment that enables users to run programs or open files without affecting the application, system or platform on which they run.
	 Sandboxes are also used to safely execute malicious code to avoid harming the host device, the network or other connected devices. Using a sandbox to detect malware offers an additional layer of protection against security threats, such as stealthy attacks and exploits that use zero-day vulnerabilities.

	
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
RASA - open source machine learning framework (Receive, Appreciate, Sumarize, Ask)
	 - Rasa NLU (interprets the user message and respond based on intent prediction)
	 - Rasa Core (Rasa NLU passes the info to Core (predicted intent) ,  manages the next flow)
		- This intern connects to VCA controller 
		Virtual Chat Assistants
 		
1.  how many ways of defining for-root

Junk Data for testing (API - JSON response)
-------------------------------------------
https://swapi.co/api/ 



CSS & HTML & Bootstrap & SCSS
------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
1. differnce between div and span , html5 
2. how to show a paragraph to be shown in 3 columns using only css
3. how does the glyphicons work 
   - what is a sprite image 
4. Wat is flexlayout
	Items display in a row (the flex-direction property's default is row).
	The items start from the start edge of the main axis.
	The items do not stretch on the main dimension, but can shrink.
	The items will stretch to fill the size of the cross axis.
	The flex-basis property is set to auto.
	The flex-wrap property is set to nowrap.
	
	.box {
		display: flex;
		flex-direction: row-reverse;
	}
	<div class="box">
		<div>One</div>
		<div>Two</div>
		<div>Three</div>
	</div>
5. what are partials, extend, include in SCSS
6. what are the different values of position attribute (static,relative,fixed,absolute,sticky)
	An element with position: sticky; is positioned based on the user's scroll position.
7. box shadow : 
   e.g. box-shadow: none|h-offset v-offset blur spread color |inset|initial|inherit;
8. what is col-span in tables
9. <no-script> tag 
10. box model
11. Touch enabled devices => anchor based menus => for android / ios  href = "#" , for touch enabled PCs add aria-haspopup="true"
12. How do u write a css selector from parent to child ? Is it possible ?
13. Whats the difference between rem & em


---------------------------------------------------------------------------------------------------------------------------------------------------

Standalone components

- supported from Angular 15

- need not be included in the angular module

- ng g component my-app-test --standalone=true       

  or

  add standalone: true to in the component signature

  

  E.g.

              @Component({

                             selector: 'my-app-test',

                             standalone: true,

                             imports: [CommonModule],

                             templateUrl: './my-app-test.html'

                             styleUrls: ['./my-app-test.scss']

              })

 

- and in the main.ts you can use bootstrapApplication(MyAppTest).catch((error) => console.error(error));

              this method comes from '@angular/platform-browser-dynamic' package

- all dependencies of the component can be added in the imports array of the component signature

              earlier in the modules scenario the components were added in the delcaration array.

 

- creating standalone angular component only when we have a scenario that needs that only component is to be created

              which ideally does not need a module to be created

             

             

---------------------------------------------------------------------------------------------------------------------------------------------------

Angular 17

- standalone by default

- ssr not use universal

- control flow

              - @if, @else if, @else

              - switchCase block

              - @for loop needs to use track property

                             -@empty feature to show empty array

              - @defer for dynamic loading of the templates

              - support for vite and eslint

              - signals

 

Course guide

- @Input takes an attribute "required", defaulted to false

              - when true it makes it mandatory to pass the input property to the component , else gives error at runtime due to missing property

              - @Input({required: true})

- @Output to give custom name to the event emitter in the html

              @Output('triggerMe') myEmitter = new EventEmitter<string>();

              now in the html template use the alias name

              <my-component (triggerMe)="emittedThisFun($event)"><my-component>

- Control flow , the new syntax could be used directly on standalone components without having to import them from CommonModule

              - For automated migration u could use => ng g @angular/core:control-flow

              - @for loop needs to use track property compulsorily

                             -$index is an attribute that can be used for tracking the index of each record

                             -$count is an attribute to get the total number of elements in the iterable

                             -$first to get the first index element / record

                             -$last to get the last index element

                             -$even & $odd to get the reference to the even and odd index element

                             - tracking function helps angular to otptimize DOM being rendered specially with concern to @for implementation

                                           - always assign a unique id to track property

                                           - alernatively create custom tracking function which denerates a unique identifier

                                           -This function is mandatory now, with out this the code would break

              - @empty is used for displaying a section that could be displayed in case if the looped array is empty

              - @If takes condition to check and display a template

              - @else if takes a condition to check and display the template, provided previous "if" condition has failed

              - @else in case both "if" and "else if" fail, then the control flows to the "else" block

              - @switch is another new addition to Angular 17 that helps in creating switch cases

- ViewChild takes a property {read: ElementRef} that ensures that the view child instance takes the element reference

              instead of the component reference speically when a querylist is being fetched

              @ViewChild('child1') card1:CardComponent;

              //With above property instead of the component reference element reference can be fetched

              @ViewChild('child1',{read: ElementRef}) card1: ElementRef

              - A way to check the local template (child) and not the further levels in the hierarchy tree

              - @ViewChildren(CardComponentm,{read : ElementRef})

                             myCard: QueryList<ElementRef>;

- ContentChild only to access the projected content, ContentChildren to access all the projected contents of type QueryList

- ng-template

              - to show template contents, best implementation in case of *ngIf else scenario

              - the ng-template section is never added to the page (not part of the DOM) by default

              - A sample code to understand how ng-template can be passed an input

                             E.g

                                           <ng-template #blankImageTmplt let-courseName="description">

                                                          <p class="warn">{{courseName}} has no image yet.</p>

                                                          <img src="/assets/empty-image.png">

                                           </ng-template>

                                           <ng-container *ngTemplateOutlet="blankImage; context: {description: course.description}"></ng-container>

                             Note: the context property 'description' is used as the value in the ng-template let-courseName

- Attribute Directive

              - attributes that modify the behaviour or appearance of the plain html elements are called attribute directives

              - e.g. disabled , required

              - Hostbinding

- Structural directive (Creating a custom structural directives)

              - ideally a prefix of ngx is given to the custom created structural directives (ng => angular extended directive)

              - these are special directives that can ability to instantiate ng-template. What it means is ideally speaking *ngIf is not a short hand of

                             <ng-temlpate [ngIf]="some condition">

                                           //some implementation

                             </ng-template>

                             So, while implementing  a custom structural directive we would be just implementing a attribute directive that could instantiate

                             <ng-tempalte> as in the above psuedo code like how under the hood ngIf doe it

- Encapsulation

              - host-selector  / :host styling

                             - Some times when a component is created say 'course-card' component and you want to keep style this component based on the host tag "course-card",

                                           in such scenarios instead of using the tag name selectors the styling can be put inside the component css file using the key word 'host'

                                           E.g

                                                          :host { border: 1px solid #dedede; display: block;}

                             - :host does not work with ViewEncapsulation set to None                     

              - ::ng-deep

                             Ideally for styling contents received inside a component using content porjection

              - host-context to apply styles to specific section of a component

                             ::host-context(.theme-name) .some-class {

                                           //some properties

                             }

                             - :host-context does not work with ViewEncapsulation set to None                          

- Services

              - angular creates instances for dependency injection of the service classes based on the value of providedIn property

              - angular dependency injection system has a factory function to create the instance of the service

              - internally angular creates a injection token or a prvovider function that creates the instance of the class (service class)

              - hierarchical dependency

                             - in case a component does not find its services in the providers list then it checks its parent component for the providers list

                             - the component keeps checking till its root to find the provider service

                             - providers in component would be useful when some private data is required by the component that should not be exposed out side.

              - treeshakable providers

                             - in some scenarios some of the services may never be used, but could be part of the application bundle

                             - @Injectable({

                                           providedIn: 'root'

                             })

                             - for singletons always prefer tree shakable providers.

              - @Optional - sometimes in case a service is not available in the component we see an error "No provider for service".

                             Note: this scenario can be reproduced by removing the providedIn attribute in the service class,

                             the service is not be added to the dependency angular injector system

                             To remove this error we can use @Optional decorator as below

                                           constructor(@Optional() private _myServ: MyService){

                                           }

              - @Self - sometimes we would need a private copy of the service been injected this could be done by using @Self

                             some scenario where u want to avoid heirarchical injection from parent

                             But if using @Self also ensure that the service is added in the providers array in the component

              - @SkipSelf - this ensures that the injection is not from the local copy and it must be from parent component

                  Just to ensure this , if you remove the dependencies from the parent, it starts throwing "No provider for service" error

              - @Host - to share the service instance with the directives , get a copy of the instance

              - instead of using a constructor we could also use inject method
                                                                       

- Attribute decorator    

              - A way of performance optimizer, basically a way of one time binding

              - Sometimes there are input properties that do not change and their values are fixed. So, for such properties we could avoid change detection cycles running frequently

              - Such properties can be replaced with @Attribute decorator in the constructor, it takes attribute name as a parameter

                             E.g. constructor(@Attribute('type') private _type:string) {

                                           //ur logic of using the property

                             }

              - In the html template use as below

                             <my-card type="beginner"></my-card>

- Change detection

              - comes into play ideally when we have a @Input property or if there is a observable bound to the template using async

- Internationalization

              - for implementating internationalization add an attribute i18n to the labels / fields that need a conversion

              - this is not a angular directive , its a custom directive that angular cli uses to extract the string

                             E.g. <h3  i18n> Welcome to the organization </h3>

              - run angular cli command for the extraction => ng xi18n

              - this creates a messages file under source folder with the name => messages.xlf

              - each text / label string will have a unique identifier

              - default language that message.xlf handles is English. To check the source-language check the "file" tag which has source-language property

                             <file source-language="en"

              - to generate a messages.xlf file for a specific language, use the below command

                             - ng xi18n --i18n-locale fr

                             - fr refers to french

              - to get the translated strings the message.xlf is shared with the translation team who returns with the language specific file

              - we would notice that the translated file would have a "target" tag next to the "source" tag with the translation

              - say the translation is into french then a file is created under source -> locale -> messages.fr.xlf

              - in angular.json

                             - search configuration property

                             - below production add extra configuration property

                             - for french say it would look like

                                           "fr":{

                                                          "aot": "true",

                                                          "outputPath": "dist/angular-course-fr/",

                                                          "i18nFile": "src/locale/messages.fr.xlf/",

                                                          "i18nFormat": "xlf",

                                                          "i18nlocale": "fr",

                                                          "i18nMissingTranslation": "error"

                                           }

                             - aslo configure the server task

                                           - under server task -> configuration

                                           - after production section

                                           - add another task

                                                          "fr" : {

                                                                        "browserTarget" : "angular-course:build:fr"

                                                          }

- Angular Elements

              - ng add @angular/elements --project-name=nameofproject

              - create a component that you want to convert to a angular element

- Defer @defer

              - Ideally preferred to be used only the application pages are taking time to load / performance issues

              - with this load a part of template only if needed , reducing the overall size of the bundle

              - scenarios where there is a large page section which needs to be loaded only on scroll, those sections

                             can be loaded lazily using defer

              - keep the content of the screen loaded in the background, but render it only on specific actions

              - 2 things that can be controlled using defer

                             - when the content gets loaded

                             - when the content gets applied / rendered to the template

              - @defer block loads only when there is a condition met, but when there is nothing to display there should be some

                             default content displayed. This scenario is handled using "@placeholder"

                             E.g.

                                           @defer {

                                                          <div> This is main content </div>

                                           }

                                           @placeholder{

                                                          <div> Content loading here </div>

                                           }

                             - idle trigger (requestIdleCallback method)      

                                           - the method returns a confirmation to the angular application that its in idle state the defer block loads

                                           - when all other resources have finished loading (including the loading section)

                                           - @defer(on idle;prefetch on ilde) default trigger same as @defer()

                             - immediate trigger (called eagerly without waiting for requestIdleCallback method)

                                           - @defer(on immediate;prefetch on immediate)

                             - timer trigger

                                           - load the defer section after a certain interval

                                                          - @defer(on timer(15s);prefetch on ilde) =>

              - @placeholder can take an input minimum seconds before which the defered template get rendered

                                           @placeholder(minimum 5s){

                                                          <div> Content loading here </div>

                                           }

                             This annotation is a replacement for the deferred section. So, in case the defered section does not load

                             based on the condition, this will continue to appear

              - @loading - This block is for implementing a loading indicator. This appears before the the defer block / place holder

                             appears

                             This can take a minimum time parameter to be shown before the defer / placeholder appears

                             It also take another parameter called after, which means the loading indicator waits for 1s for the defer to complete

                             and see if defer block is taking more time to load, only if so then the loading section displays.

                             This is to avoid flickering and to avoid bad user experienceFTG

                                           @loading(minimum 3s; after 1s) {

                                                          <div> Loading indicator ...... </div>

                                           }                           

              - @error - This block gets loaded just in case of errors in loading the defer block

                             - @error { <h1> Some error </h1> }

                             - could be a scenario when the network goes down and the

                            

- Signals

              - integration to change detection for better runtime performance

    3. My profile

    4. Creating mono repos

              Monorepo

- A single respository with multiple projects that work together. Has multiple packages / apps / libraries

              Google, netflix, twitter all use monorepo

- Code sharing, a package could be shared across applications without having to have npm packages

- separate pipeline for every individual application

 

- refer npm workspaces

- Collaboration

- Dependency Management

- Refactoring

 

Disadvantages

              - Git operations are slow

              - encourages tight coupling

              - challenges in creating pipelines

              - PRs would have to be distributed properly

              - whole system is blocked if the master has an issue

              - may give access to other pacakges

              - ensure that while the branches are created for a specific application, they are merged back to the main regularly

             

NX

              - biolerplate code generations

              - inspired by bazel

              - Needs configuration

    - command to create a monorepo

                             - npx create-nx-workspace@latest

                             - shows a list of options to create a mono repo, ideally good to create an integrated monorepo

                             - after this we get options to create different type of application types (react / angular or so on)

                             - next u see an option to create application name

                             - to add another angular application npx nx g @nrwl/angular:application somename --ts

                            

Creating a monorepo detailed step by step process

              - npm install -g nx

              - npx create-nx-workspace@latest anglr-app-workspace

              - npm install @nrwl/angular -D

              - nx generate @nrwl/angular:application my-first-appln

              - cd anglr-app-worspace

              - nx serve my-first-appln

             

              to create angular libraries inside the same workspace

              - nx generate @nrwl/angular:lib comp-lib

              to create a component inside the comp-lib project say name of component is 'listing'

              - nx generate @nrwl/angular:component --project=comp-lib --name=listing

             

              Note : access to all these lib components / projects is configured in tsconfig.base.json

              ideally good practice to create a script in package.json to build the libs folder

                             - "build:libs" : "ng build comp-lib"

                            

             

              these components are accessible from the main project anglr-app-workspace  


--------------------------------------------------------------------------------------------
AWS 
	- CDN creation - https://www.youtube.com/watch?v=GUfAQUjA3a0
						   https://www.youtube.com/watch?v=KIltfPRpTi4
	